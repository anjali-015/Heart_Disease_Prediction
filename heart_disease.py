# -*- coding: utf-8 -*-
"""Heart Disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l1Ptt2J-OJbR6DAGP3bYGr3dymfSFh7n
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Preprocessing"""

# loading the csv data to pandas

data=pd.read_csv("/content/heart_disease_data.csv")

#print first 5 rows of the dataset

data.head()

#print last 5 rows of dataset

data.tail()

#number of rows and columns in the dataset
data.shape

# getting some information about the data
data.info()

# checking for missing values
data.isnull().sum()

# statistical measures about the data
data.describe()

# checking the distribution of target variable
data['target'].value_counts()

"""1-->Defective Heart

0-->Healthy Heart

Splitting the feature and target
"""

x= data.drop(columns='target',axis=1)
y= data['target']
print(x)

print(y)

import seaborn as sns

sns.set_style('whitegrid')
sns.countplot(x='target',data=data,palette='RdBu_r')

"""Splitting the Data into Traning data & Test Data"""

x_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

"""Model Traning

Logistic Regression
"""

model=LogisticRegression()

# training the logisticregression model with traning data
model.fit(x_train,y_train)

# Accuracy on training data
x_train_prediction = model.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)

print('Accuracy on Training data :',training_data_accuracy)

# accuracy on test data
x_test_prediction=model.predict(x_train)
traning_data_accuarcy=accuracy_score(x_train_prediction,y_train)

x_test_prediction=model.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)

print('Accuracy on test data :',test_data_accuracy)

"""Buliding a Predictive System"""

input_data=(63,1,0,130,254,0,0,147,0,1.4,1,1,3)

# change the input databinto numpy array
input_numpy=np.asarray(input_data)

# reshape the numpy array as we are prediction for only on instance
input_reshape=input_numpy.reshape(1,-1)

prediction=model.predict(input_reshape)

if (prediction[0]==0):
  print("The Person does not have a Heart Disease")
else:
  print("The Person has Heart Disease")